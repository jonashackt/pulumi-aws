name: ec2-pulumi-ansible

on: [push]

jobs:
  ec2-pulumi-ansible:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache pipenv virtualenvs incl. all pip packages
      uses: actions/cache@v2
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-

    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install required dependencies with pipenv
      run: |
        pip install pipenv
        pipenv install

    - name: Destroy pre-created Pulumi instances
      uses: pulumi/actions@v1
      with:
        command: destroy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

    - name: Generate EC2 keypair and save private key locally (since Pulumi isn't able to do that now)
      run: pipenv run ansible-playbook keypair.yml
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: eu-central-1

    - name: Execute Pulumi to create EC2 instances
      uses: pulumi/actions@v1
      with:
        command: up
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

    - name: Downloading the Ansible role 'docker' with ansible-galaxy & run Ansible role to install Docker on Ubuntu
      run: |
        pipenv run ansible-galaxy install -r requirements.yml -p roles/
        pipenv run ansible-playbook playbook.yml
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: eu-central-1

    - name: Install Pulumi CLI using the install-pulumi-cli GitHub Action needed for pytest hosts variable
      uses: pulumi/action-install-pulumi-cli@v1.0.1

    - name: Use Testinfra with Pytest to execute our tests
      run: py.test -v tests/test_docker.py --ssh-identity-file=.ec2ssh/pulumi_key --ssh-config=tests/pytest_ssh_config --hosts='ssh://'$(pulumi stack output publicIp)

    - name: Destroy Pulumi instances after successful tests
      uses: pulumi/actions@v1
      with:
        command: destroy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}